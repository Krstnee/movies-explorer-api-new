{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport default function useFormAndValidation() {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    setErrors({ ...errors,\n      [name]: e.target.validationMessage\n    });\n    setIsValid(e.target.closest('form').checkValidity());\n  };\n\n  const resetForm = useCallback(function () {\n    let newValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let newErrors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let newIsValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    setValues(newValues);\n    setErrors(newErrors);\n    setIsValid(newIsValid);\n  }, [setValues, setErrors, setIsValid]);\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm\n  };\n}\n\n_s(useFormAndValidation, \"msMIfc7pG71dSFDSlZa7+l3GN6k=\");","map":{"version":3,"names":["useState","useCallback","useFormAndValidation","values","setValues","errors","setErrors","isValid","setIsValid","handleChange","e","name","value","target","validationMessage","closest","checkValidity","resetForm","newValues","newErrors","newIsValid"],"sources":["C:/Users/crist/dev/mesto-react/mesto-react/src/hooks/useFormAndValidation.js"],"sourcesContent":["import { useState, useCallback } from 'react'\n\nexport default function useFormAndValidation() {\n  const [values, setValues] = useState({})\n  const [errors, setErrors] = useState({})\n  const [isValid, setIsValid] = useState(false)\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n    setErrors({ ...errors, [name]: e.target.validationMessage })\n    setIsValid(e.target.closest('form').checkValidity())\n  }\n\n  const resetForm = useCallback(\n    (newValues = {}, newErrors = {}, newIsValid = false) => {\n      setValues(newValues)\n      setErrors(newErrors)\n      setIsValid(newIsValid)\n    },\n    [setValues, setErrors, setIsValid]\n  )\n\n  return {\n    values,\n    handleChange,\n    errors,\n    isValid,\n    resetForm,\n  }\n}\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,eAAe,SAASC,oBAAT,GAAgC;EAAA;;EAC7C,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;;EAEA,MAAMS,YAAY,GAAIC,CAAD,IAAO;IAC1B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBF,CAAC,CAACG,MAA1B;IACAT,SAAS,CAAC,EAAE,GAAGD,MAAL;MAAa,CAACQ,IAAD,GAAQC;IAArB,CAAD,CAAT;IACAN,SAAS,CAAC,EAAE,GAAGD,MAAL;MAAa,CAACM,IAAD,GAAQD,CAAC,CAACG,MAAF,CAASC;IAA9B,CAAD,CAAT;IACAN,UAAU,CAACE,CAAC,CAACG,MAAF,CAASE,OAAT,CAAiB,MAAjB,EAAyBC,aAAzB,EAAD,CAAV;EACD,CALD;;EAOA,MAAMC,SAAS,GAAGhB,WAAW,CAC3B,YAAwD;IAAA,IAAvDiB,SAAuD,uEAA3C,EAA2C;IAAA,IAAvCC,SAAuC,uEAA3B,EAA2B;IAAA,IAAvBC,UAAuB,uEAAV,KAAU;IACtDhB,SAAS,CAACc,SAAD,CAAT;IACAZ,SAAS,CAACa,SAAD,CAAT;IACAX,UAAU,CAACY,UAAD,CAAV;EACD,CAL0B,EAM3B,CAAChB,SAAD,EAAYE,SAAZ,EAAuBE,UAAvB,CAN2B,CAA7B;EASA,OAAO;IACLL,MADK;IAELM,YAFK;IAGLJ,MAHK;IAILE,OAJK;IAKLU;EALK,CAAP;AAOD;;GA5BuBf,oB"},"metadata":{},"sourceType":"module"}