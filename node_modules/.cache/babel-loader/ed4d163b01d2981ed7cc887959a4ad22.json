{"ast":null,"code":"import apiConfig from './apiConfig';\n\nclass Api {\n  constructor(configData) {\n    this._getResponseData = (res, message) => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`ошибка ${res.status} при ${message}`);\n      }\n    };\n\n    this._baseUrl = configData.apiData.baseUrl;\n    this._headers = configData.apiData.headers;\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => this._getResponseData(res, 'загрузке данных профиля с сервера'));\n  }\n\n  getInititalCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(res => this._getResponseData(res, 'загрузке постов с сервера'));\n  }\n\n  setUserInfo(userInfo) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(userInfo)\n    }).then(res => this._getResponseData(res, 'отправке данных пользователя на сервер'));\n  }\n\n  createNewCard(cardElement) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(cardElement)\n    }).then(res => this._getResponseData(res, 'создании нового поста'));\n  }\n\n  removeCard(cardElement) {\n    return fetch(`${this._baseUrl}/cards/${cardElement._id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._getResponseData(res, 'удалении поста'));\n  }\n\n  setAvatar(avatarLink) {\n    console.log(avatarLink);\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    }).then(res => this._getResponseData(res, 'отправке изображения пользователя на сервер'));\n  }\n\n  handleLikeServer(card, isLiked) {\n    const httpMethod = isLiked ? 'DELETE' : 'PUT';\n    return fetch(`${this._baseUrl}/cards/${card._id}/likes`, {\n      method: httpMethod,\n      headers: this._headers\n    }).then(res => this._getResponseData(res, 'загрузке данных с сервера'));\n  }\n\n}\n\nconst api = new Api(apiConfig);\nexport default api;","map":{"version":3,"names":["apiConfig","Api","constructor","configData","_getResponseData","res","message","ok","json","Promise","reject","status","_baseUrl","apiData","baseUrl","_headers","headers","getUserInfo","fetch","then","getInititalCards","setUserInfo","userInfo","method","body","JSON","stringify","createNewCard","cardElement","removeCard","_id","setAvatar","avatarLink","console","log","avatar","handleLikeServer","card","isLiked","httpMethod","api"],"sources":["C:/Users/crist/dev/mesto-react/mesto-react/src/utils/api.js"],"sourcesContent":["import apiConfig from './apiConfig'\n\nclass Api {\n  constructor(configData) {\n    this._baseUrl = configData.apiData.baseUrl\n    this._headers = configData.apiData.headers\n  }\n\n  _getResponseData = (res, message) => {\n    if (res.ok) {\n      return res.json()\n    } else {\n      return Promise.reject(`ошибка ${res.status} при ${message}`)\n    }\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, { headers: this._headers }).then(\n      (res) => this._getResponseData(res, 'загрузке данных профиля с сервера')\n    )\n  }\n\n  getInititalCards() {\n    return fetch(`${this._baseUrl}/cards`, { headers: this._headers }).then(\n      (res) => this._getResponseData(res, 'загрузке постов с сервера')\n    )\n  }\n\n  setUserInfo(userInfo) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(userInfo),\n    }).then((res) =>\n      this._getResponseData(res, 'отправке данных пользователя на сервер')\n    )\n  }\n\n  createNewCard(cardElement) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(cardElement),\n    }).then((res) => this._getResponseData(res, 'создании нового поста'))\n  }\n\n  removeCard(cardElement) {\n    return fetch(`${this._baseUrl}/cards/${cardElement._id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then((res) => this._getResponseData(res, 'удалении поста'))\n  }\n\n  setAvatar(avatarLink) {\n    console.log(avatarLink)\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({ avatar: avatarLink }),\n    }).then((res) =>\n      this._getResponseData(res, 'отправке изображения пользователя на сервер')\n    )\n  }\n\n  handleLikeServer(card, isLiked) {\n    const httpMethod = isLiked ? 'DELETE' : 'PUT'\n    return fetch(`${this._baseUrl}/cards/${card._id}/likes`, {\n      method: httpMethod,\n      headers: this._headers,\n    }).then((res) => this._getResponseData(res, 'загрузке данных с сервера'))\n  }\n}\n\nconst api = new Api(apiConfig)\n\nexport default api\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}